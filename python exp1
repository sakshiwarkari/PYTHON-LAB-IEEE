{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOIs9DJSlcbULhPOL2kj3wI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sakshiwarkari/PYTHON-LAB-IEEE/blob/main/python%20exp1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IvmGRi5HCYqK"
      },
      "outputs": [],
      "source": [
        "QUE0\n",
        "tuple-\n",
        "my_tuple = (1, 2, 2, 3, 4, 2)\n",
        "\n",
        "# count() - Count the number of occurrences of a value\n",
        "count_of_2 = my_tuple.count(2)\n",
        "print(count_of_2)  # Output: 3\n",
        "\n",
        "# index() - Find the index of a value\n",
        "index_of_3 = my_tuple.index(3)\n",
        "print(index_of_3)  # Output: 3\n",
        "\n",
        "# len() - Get the length of the tuple\n",
        "length = len(my_tuple)\n",
        "print(length) #output:6\n",
        "\n",
        "string-\n",
        "my_string = \"Hello, World\"\n",
        "\n",
        "# split() - Split a string into a list of substrings\n",
        "words = my_string.split(\", \")\n",
        "print(words)  # Output: ['Hello', 'World']\n",
        "\n",
        "# join() - Join a list of strings into a single string\n",
        "joined_string = \"-\".join(words)\n",
        "print(joined_string)  # Output: 'Hello-World'\n",
        "\n",
        "# strip() - Remove leading and trailing whitespace\n",
        "trimmed_string = my_string.strip()\n",
        "print(trimmed_string)  # Output: 'Hello, World'\n",
        "\n",
        "list-\n",
        "my_list = [1, 2, 3]\n",
        "\n",
        "# append() - Add an element to the end of the list\n",
        "my_list.append(4)\n",
        "print(my_list)  # Output: [1, 2, 3, 4]\n",
        "\n",
        "# remove() - Remove the first occurrence of a value\n",
        "my_list.remove(2)\n",
        "print(my_list)  # Output: [1, 3, 4]\n",
        "\n",
        "# pop() - Remove and return an element by index\n",
        "popped_value = my_list.pop(0)\n",
        "print(popped_value)  # Output: 1\n",
        "\n",
        "dictionary-\n",
        "my_dict = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\n",
        "\n",
        "# keys() - Get a list of keys\n",
        "keys = my_dict.keys()\n",
        "print(keys)  # Output: dict_keys(['name', 'age', 'city'])\n",
        "\n",
        "# values() - Get a list of values\n",
        "values = my_dict.values()\n",
        "print(values)  # Output: dict_values(['Alice', 30, 'New York'])\n",
        "\n",
        "# items() - Get a list of key-value pairs as tuples\n",
        "items = my_dict.items()\n",
        "print(items)  # Output: dict_items([('name', 'Alice'), ('age', 30), ('city', 'New York')])\n",
        "\n",
        "sets-\n",
        "my_set1 = {1, 2, 3}\n",
        "my_set2 = {3, 4, 5}\n",
        "\n",
        "# add() - Add an element to the set\n",
        "my_set1.add(4)\n",
        "print(my_set1)  # Output: {1, 2, 3, 4}\n",
        "\n",
        "# remove() - Remove an element from the set\n",
        "my_set1.remove(2)\n",
        "print(my_set1)  # Output: {1, 3, 4}\n",
        "\n",
        "# union() - Create a new set containing unique elements from two sets\n",
        "union_set = my_set1.union(my_set2)\n",
        "print(union_set)  # Output: {1, 3, 4, 5}\n",
        "\n",
        "\n",
        "QUE1\n",
        "def reverse_and_concatenate(A, B):\n",
        "    # Reverse string A\n",
        "    reversed_A = A[::-1]\n",
        "\n",
        "    # Concatenate the reversed string A with string B\n",
        "    result = reversed_A + B\n",
        "\n",
        "    return result\n",
        "\n",
        "# Example usage:\n",
        "string_A = \"Hello\"\n",
        "string_B = \"World\"\n",
        "result_string = reverse_and_concatenate(string_A, string_B)\n",
        "print(result_string)  # Output: \"olleHWorld\"\n",
        "\n",
        "\n",
        "\n",
        "QUE2\n",
        "work_hours = [('Abby', 100, 'F'), ('Billy', 400, 'M'), ('Cassie', 800, 'F'),\n",
        "    ('Maggi', 600, 'F'), ('Alex', 500, 'M'), ('Raj', 225, 'M'), ('Penny', 920, 'F'),\n",
        "              ('Ben', 300, 'M')]\n",
        "\n",
        "def find_female_with_most_hours(work_hours):\n",
        "    max_hours = 0\n",
        "    female_with_most_hours = None\n",
        "\n",
        "    for name, hours, gender in work_hours:\n",
        "        if gender == 'F' and hours > max_hours:\n",
        "            max_hours = hours\n",
        "            female_with_most_hours = name\n",
        "\n",
        "    return female_with_most_hours, max_hours\n",
        "\n",
        "# Call the function to find the female worker with the most hours\n",
        "female_worker, max_hours = find_female_with_most_hours(work_hours)\n",
        "\n",
        "# Calculate her payment (assuming $20 per hour)\n",
        "payment = max_hours * 20\n",
        "\n",
        "print(f\"The female worker that worked the most hours is {female_worker} and she should be paid ${payment}\")\n",
        "\n",
        "\n",
        "\n",
        "QUE3\n",
        "import numpy as np\n",
        "\n",
        "# Create a 2x2 matrix with repetitive rows\n",
        "row1 = np.array([1, 1])\n",
        "row2 = np.array([2, 2])\n",
        "\n",
        "# Use np.vstack to create a 5x2 matrix by stacking rows vertically\n",
        "matrix_a = np.vstack([row1, row2])\n",
        "\n",
        "# Use np.tile to replicate the matrix to form a 5x5 matrix\n",
        "matrix_5x5 = np.tile(matrix_a, (5, 1))\n",
        "\n",
        "# Print the 5x5 matrix\n",
        "print(\"5x5 Matrix:\")\n",
        "print(matrix_5x5)\n",
        "\n",
        "# Create another matrix (for dot product, it must have matching dimensions)\n",
        "matrix_b = np.random.randint(1, 10, size=(5, 2))  # Random 5x2 matrix\n",
        "\n",
        "# Find the dot product\n",
        "dot_product_result = np.dot(matrix_5x5, matrix_b)\n",
        "# Print the dot product result and its shape\n",
        "print(\"\\nDot Product Result:\")\n",
        "print(dot_product_result)\n",
        "print(\"Shape of Dot Product Result:\", dot_product_result.shape)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}